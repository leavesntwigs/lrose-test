# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
# GTEST_DIR = ..
# GTEST_DIR = /usr/local/gtest
GTEST_DIR = /usr/local

# Where to find user code.
# USER_DIR = ../samples
USER_DIR = ../libs/Radx
APPS_DIR = ../apps
LIBS_DIR = ../libs
SRC_DIR = ../../lrose-core/codebase

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
# TESTS = sample1_unittest
TESTS = RadxVol_unittest RadxTimeList_unittest Rsl_unittest RemoveAcMotion_unittest \
	RemoveAcMotion_unittest Unfolding_unittest \
	FlagOps_unittest
#  	FourDD_unittest Boundary_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
# GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GTEST_SRCS_ = ../runners/*.cc ../runners/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            ../runners/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            ../runners/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
	$(USER_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc

sample1_unittest : sample1.o sample1_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lgtest_main -lgtest -lpthread $^ -o $@


# RadxTimeList.o : $(USER_DIR)/RadxTimeList.cc $(USER_DIR)/RadxTimeList.h $(GTEST_HEADERS)
	# $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/RadxTimeList.cc

RadxTimeList_unittest.o : $(USER_DIR)/RadxTimeList_unittest.cc \
	$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include  -c $(USER_DIR)/RadxTimeList_unittest.cc

RadxTimeList_unittest : RadxTimeList_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L${LROSE_INSTALL_DIR}/lib -lRadx -lNcxx -lhdf5_cpp  -lgtest_main -lgtest -lpthread $^ -o $@

RadxVol_unittest.o : $(USER_DIR)/RadxVol_unittest.cc \
	$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include  -c $(USER_DIR)/RadxVol_unittest.cc

RadxVol_unittest : RadxVol_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L${LROSE_INSTALL_DIR}/lib \
	-lnetcdf_c++ -lnetcdf -lhdf5_hl -lhdf5 -lz -ludunits2 -lbz2 -lexpat \
	-lRadx -lNcxx -lhdf5_cpp  -lgtest_main -lgtest -lpthread $^ -o $@
#
# Rsl
#

Rsl_unittest.o : $(APPS_DIR)/radar/src/RadxDealias/Rsl_unittest.cc \
        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -I$(SRC_DIR)/apps/radar/src/RadxDealias -c $(APPS_DIR)/radar/src/RadxDealias/Rsl_unittest.cc

Rsl_unittest : Rsl_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L${LROSE_INSTALL_DIR}/lib -lRadx -lNcxx -lhdf5_cpp  -lgtest_main -lgtest -lpthread $(SRC_DIR)/apps/radar/src/RadxDealias/Rsl.o $^ -o $@

# 
# FourDD 
#

Rsl.o : $(SRC_DIR)/apps/radar/src/RadxDealias/Rsl.cc $(SRC_DIR)/apps/radar/src/RadxDealias/Rsl.hh 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -c $(SRC_DIR)/apps/radar/src/RadxDealias/Rsl.cc 

FourDD_unittest.o : $(APPS_DIR)/radar/src/RadxDealias/FourDD_unittest.cc \
	$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -I$(SRC_DIR)/apps/radar/src/RadxDealias -c $(APPS_DIR)/radar/src/RadxDealias/FourDD_unittest.cc

FourDD_unittest : FourDD_unittest.o Rsl.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L${LROSE_INSTALL_DIR}/lib -lRadx -lNcxx -lhdf5_cpp  -lgtest_main -lgtest -lpthread $(SRC_DIR)/apps/radar/src/RadxDealias/FourDD.o  $^ -o $@

# 
# Soloii - Boundary
#

# Rsl.o : $(SRC_DIR)/libs/Solo/src/Solo/Rsl.cc $(SRC_DIR)/libs/Solo/src/Solo/Rsl.hh 
	# $(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -c $(SRC_DIR)/libs/Solo/src/Solo/Rsl.cc 

Boundary_unittest.o : $(LIBS_DIR)/Solo/Boundary_unittest.cc \
	$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -I$(SRC_DIR)/libs/Solo -c $(LIBS_DIR)/Solo/Boundary_unittest.cc

Boundary_unittest : Boundary_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L${LROSE_INSTALL_DIR}/lib -lSolo -lNcxx -lhdf5_cpp  -lgtest_main -lgtest -lpthread $^ -o $@

# 
# Soloii - RemoveAcMotion
#

# Rsl.o : $(SRC_DIR)/libs/Solo/src/Solo/Rsl.cc $(SRC_DIR)/libs/Solo/src/Solo/Rsl.hh 
	# $(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -c $(SRC_DIR)/libs/Solo/src/Solo/Rsl.cc 

RemoveAcMotion_unittest.o : $(LIBS_DIR)/Solo/RemoveAcMotion_unittest.cc \
	$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -I$(SRC_DIR)/libs/Solo -c $(LIBS_DIR)/Solo/RemoveAcMotion_unittest.cc

RemoveAcMotion_unittest : RemoveAcMotion_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L${LROSE_INSTALL_DIR}/lib -lSolo -lNcxx -lhdf5_cpp  -lgtest_main -lgtest -lpthread $^ -o $@

# 
# Soloii - RemoveAcMotion
#

RemoveAcMotion_unittest.o : $(LIBS_DIR)/Solo/RemoveAcMotion_unittest.cc \
	$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -I$(SRC_DIR)/libs/Solo -c $(LIBS_DIR)/Solo/RemoveAcMotion_unittest.cc

RemoveAcMotion_unittest : RemoveAcMotion_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L${LROSE_INSTALL_DIR}/lib -lSolo -lNcxx -lhdf5_cpp  -lgtest_main -lgtest -lpthread $^ -o $@


# 
# Soloii - Unfolding
#

Unfolding_unittest.o : $(LIBS_DIR)/Solo/Unfolding_unittest.cc \
	$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -I$(SRC_DIR)/libs/Solo -c $(LIBS_DIR)/Solo/Unfolding_unittest.cc

Unfolding_unittest : Unfolding_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L${LROSE_INSTALL_DIR}/lib -lSolo -lNcxx -lhdf5_cpp  -lgtest_main -lgtest -lpthread $^ -o $@

# 
# Soloii - FlagOps
#

FlagOps_unittest.o : $(LIBS_DIR)/Solo/FlagOps_unittest.cc \
	$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I${LROSE_INSTALL_DIR}/include -I$(SRC_DIR)/libs/Solo -c $(LIBS_DIR)/Solo/FlagOps_unittest.cc

FlagOps_unittest : FlagOps_unittest.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L${LROSE_INSTALL_DIR}/lib -lSolo -lNcxx -lhdf5_cpp  -lgtest_main -lgtest -lpthread $^ -o $@

