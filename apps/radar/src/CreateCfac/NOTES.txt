I think we need examples of these files:
1. DATA_cns_Cai (or the file 99 parameters)
   see https://github.com/mmbell/Airborne-Radar-QC/blob/master/navigation/DATA_cns_run
2. surf_dtm_* files  (or the file 20)
   This does not seem to be used; it is turned off in the DATA_cns_run file:
   Otherwise, the file name would be something like ... 'IHOP_DTM_1km'



Input parameter and file name file:

99: file name from command line args
c     open(99,file='DATA_cns_Cai',status='unknown')
      open(99,file=argu,status='unknown')

Not used
20: surf_dtm_*  
       open(20

output file base directory:

30: wrisurfile<N> 
        open(30

Output files:

10: fich_cornav

      open(10,file=directory(1:ndir)//'/'//fich_cornav

50: fich_sis

      open(50,file=directory(1:ndir)//'/'//fich_sis

55: (read the ELDORA data from text files) 
        open(55,file=infilename, status='old')

11: cfac.aft
         open(11,file=directory(1:ndir)//'/'//'cfac.aft'
12: cfac.fore
          open(12,file=directory(1:ndir)//'/'//'cfac.fore'


How do we want this to work?
I think the main function as a service.
Send parameters as arguments to the service (How many? about 44 individual values; can they be strung into an array? or a list? or a dictionary?))
Then, return what? files? output parameters? (How many?) cfac.aft has 16 values; cfac.fore has 16 values
Service is a library?  A C or Fortran library? with Python bindings? like the PySolo code? Follow Ammar's approach?
* remove the file read and write stuff from the Fortran code.
* send parameters/arguments to the Fortran code
* try to wrap the Fortran code as a library, wrapped with C/C++ and Python bindings.
 This will help understand how to do this with the AOS code.

Phase I
   just convert the code and get it running

Phase II
   work on user interfaces as needed

11/12/2024
Trying the numpy.f2py
There are three approaches:
1. meson: new build system. Doesn't seem to work, repeated error
        meson not found
2. cmake: documentation claims cmake is not so well supported.
3. scipy: uses cmake, but also scipy, so yet another package to install.
4. distutil, but this is deprecated.

I cannot make progress with any of the options for f2py.
I am trying Scipy.
Performant

mamba create environment scipy ...

brew install gfortran,
also updated Xcode.

gfortran --help


4/14/2025

General flow of the logic

1. read_input_parameters
2. take actions based on certain parameter settings
   a. idtmfile == 0
      set ALT_SURF ???
   b. idtmfile == 1
      generate_surface_arrays.generate_surface_arrays

3. set MIN AND MAX TIMES
4. write OUPUT "CORNAV_EL_*" FILE #10
5. write OUTPUT "SIS_EL_*" FILE #50
6. INITIALIZATIONS
7. READ THE ELDORA DATA FROM TEXT FILES ( generated by Airborne-Radar-QC/navigation
/readnetcdf_DBZ_VR.f90 )
   TODO: just read using Radx libs, with Python binding and use the internal data structure???
   a. for each file:
          read ray data
          reassign variables <== remove this step; just assign correctly or send variables to a function and reassign upon passing vars.
   b. initialize correction values based on AFT corr_?[0] or FORE corr_?[1]



4/16/2025
How to approach the main code?  
I tried to move the segments of code between a logical and a go to, but the code is really entangled, there are not clean breaks between the variables.  Not enough separation to wrap the calculations into a function without sending a bunch of variables and returning a bunch of variables.
This would have been more of a bottom up approach: break the code into separate functions, test the functions individually, then the main code.

Now, I am thinking to try a top down approach.  
 1.  Start with the main logicals, comment everything inbetween.  
 2.  Test:  python cns_eldo_cai.py <input paramfile>   ;  run docker container <adjusted input paramfile for test>
     a. default param file: 'DATA_cns.txt'
 3. Repeat. Moving inward among the logicals until I reach the inner most logicals/loops.  
 4. Now, break into separate functions. 


 
