
How to compile the Fortran code:
see email
How to build container for cai-et-al:
see email
$ docker build -t caibuild:20250430 .

How to run container:
$ docker run -v .:/data -it caibuild:20250430 
This makes the current directory available in /data and the /data/cfradial directory has sample data

I think we need examples of these files:
1. DATA_cns_Cai (or the file 99 parameters)
   see https://github.com/mmbell/Airborne-Radar-QC/blob/master/navigation/DATA_cns_run
2. surf_dtm_* files  (or the file 20)
   This does not seem to be used; it is turned off in the DATA_cns_run file:
   Otherwise, the file name would be something like ... 'IHOP_DTM_1km'



Input parameter and file name file:

99: file name from command line args
c     open(99,file='DATA_cns_Cai',status='unknown')
      open(99,file=argu,status='unknown')

Not used
20: surf_dtm_*  
       open(20

output file base directory:

30: wrisurfile<N> 
        open(30

Output files:

10: fich_cornav

      open(10,file=directory(1:ndir)//'/'//fich_cornav

50: fich_sis

      open(50,file=directory(1:ndir)//'/'//fich_sis

55: (read the ELDORA data from text files) 
        open(55,file=infilename, status='old')

11: cfac.aft
         open(11,file=directory(1:ndir)//'/'//'cfac.aft'
12: cfac.fore
          open(12,file=directory(1:ndir)//'/'//'cfac.fore'


How do we want this to work?
I think the main function as a service.
Send parameters as arguments to the service (How many? about 44 individual values; can they be strung into an array? or a list? or a dictionary?))
Then, return what? files? output parameters? (How many?) cfac.aft has 16 values; cfac.fore has 16 values
Service is a library?  A C or Fortran library? with Python bindings? like the PySolo code? Follow Ammar's approach?
* remove the file read and write stuff from the Fortran code.
* send parameters/arguments to the Fortran code
* try to wrap the Fortran code as a library, wrapped with C/C++ and Python bindings.
 This will help understand how to do this with the AOS code.

Phase I
   just convert the code and get it running

Phase II
   work on user interfaces as needed

11/12/2024
Trying the numpy.f2py
There are three approaches:
1. meson: new build system. Doesn't seem to work, repeated error
        meson not found
2. cmake: documentation claims cmake is not so well supported.
3. scipy: uses cmake, but also scipy, so yet another package to install.
4. distutil, but this is deprecated.

I cannot make progress with any of the options for f2py.
I am trying Scipy.
Performant

mamba create environment scipy ...

brew install gfortran,
also updated Xcode.

gfortran --help


4/14/2025

General flow of the logic

1. read_input_parameters
2. take actions based on certain parameter settings
   a. idtmfile == 0
      set ALT_SURF ???
   b. idtmfile == 1
      generate_surface_arrays.generate_surface_arrays

3. set MIN AND MAX TIMES
4. write OUPUT "CORNAV_EL_*" FILE #10
5. write OUTPUT "SIS_EL_*" FILE #50
6. INITIALIZATIONS
7. READ THE ELDORA DATA FROM TEXT FILES ( generated by Airborne-Radar-QC/navigation
/readnetcdf_DBZ_VR.f90 )
   TODO: just read using Radx libs, with Python binding and use the internal data structure???
   a. for each file:
          read ray data
          reassign variables <== remove this step; just assign correctly or send variables to a function and reassign upon passing vars.
   b. initialize correction values based on AFT corr_?[0] or FORE corr_?[1]



4/16/2025
How to approach the main code?  
I tried to move the segments of code between a logical and a go to, but the code is really entangled, there are not clean breaks between the variables.  Not enough separation to wrap the calculations into a function without sending a bunch of variables and returning a bunch of variables.
This would have been more of a bottom up approach: break the code into separate functions, test the functions individually, then the main code.

Now, I am thinking to try a top down approach.  
 1.  Start with the main logicals, comment everything inbetween.  
 2.  Test:  python cns_eldo_cai.py <input paramfile>   ;  run docker container <adjusted input paramfile for test>
     a. default param file: 'DATA_cns.txt'
 3. Repeat. Moving inward among the logicals until I reach the inner most logicals/loops.  
 4. Now, break into separate functions. 


4/22/2025
testing the original fortran code in container ...

# start the container and run interactively ...
(base) eol-amalfi:CreateCfac brenda$ docker run -v .:/data -it cai-et-al:latest 

# must have a subdir "corrections" in the starting directory
lrose@f3bc7e164e58:/data/fortran_run$ /home/lrose/Airborne-Radar-QC/navigation/cns_eldo_cai /data/DATA_cns.txt

 ***

testing python conversion ...

(plotly_dash) eol-amalfi:CreateCfac brenda$ mamba activate plotly_dash
(plotly_dash) eol-amalfi:CreateCfac brenda$ python run_cns_eldo_cai.py

 ***
I looked for some test data; cannot find any.  I will need to create my own test data.  
1. Start with text files of data, based on the read formats.
    a. All zeros
    b. All ones
    c. random numbers
2. try some real ELDORA data; just one to three files; many need to create a new DATA_cns.txt file. 

how to pass the meta_data and data between read and  process:
>>> x = 3
>>> y = 6
>>> u = 8
>>> meta = (x,y,z)
Traceback (most recent call last):
  File "<python-input-3>", line 1, in <module>
    meta = (x,y,z)
                ^
NameError: name 'z' is not defined
>>> meta = (x,y,u)
>>> print meta
  File "<python-input-5>", line 1
    print meta
    ^^^^^^^^^^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
>>> print(meta)
(3, 6, 8)
>>> def myf(meta):
...     (x, y, z) = meta
...     print(x)
...     print(y)
...     print(z)
...     
>>> myf(meta)
3
6
8


using this data ...
$ ~/lrose/bin/RadxPrint -f  ~/data/from_isaac/cfrad.19950516_221950.411_to_19950516_221953.219_TA-ELDR_AIR.nc

no_lect is never set in the original cns...f code; Building and running the original Fortran code in a container, no_lect is set to zero, by default.  So, the no_lect variable can removed from the cns...py code.


-----

To build a modified version of cns_eldo_cai, use this container:
$ docker run -v .:/data -it caibuild:20250430

I needed to edit the cna_eldo...f file to make it read the cfradial files:
      else
        print *,' NO "SURF_EL_*" FILE WILL BE WRITTEN'
      endif
c
      close(99)
      no_lect = 0   <<<<<<  added this line >>>>>
      if(no_lect.gt.900)go to 3

to build, don't use the Makefile, it doesn't work; use this command:
gfortran -g  -o cns_eldo_cai cns_eldo_cai.f chol_inv.f -fallow-argument-mismatch -fallow-invalid-boz -I/usr/include -L/usr/local/lib -lnetcdf -lnetcdff -lcurl -L/usr/lib/aarch64-linux-gnu/hdf5/serial -lhdf5 -lhdf5_hl -I/usr/local/include 

to run,  (but, zero data case is an infinite loop, so quickly ctrl-C to kill the process)
/data# /Airborne-Radar-QC/navigation/cns_eldo_cai DATA_cns.txt > docker_run_output.txt

-----

To run full container, as user LROSE:
eol-amalfi:CreateCfac brenda$ docker run -v .:/data -it cai-et-al:latest 

----

Notes on testing:

NRANGES/nranges must be > 0 (in the data file), otherwise the file read for ranges fails/ENDS and the flow of execution goes to 5. 
The time must be > 0, otherwise, there is an infinite loop, reading the same data file over and over, since the ifile is never changed.
ihhmmss >= 0 

After computer update, need to rebuild mamba environment (import numpy is giving strange errors).

mamba create -n nameofmyenv <list of packages>
mamba create -n cfac numpy xarray xradar
mamba activate cfac
THIS SEEMS TO FIX THE WEIRD ERRORS; THINGS ARE WORKING AGAIN

